[package]
name = "telemetry-rust"
version = "0.2.4"
edition = "2021"
license = "MIT"
description = "Open Telemetry fox Axum and Tracing"

[dependencies]
http = "0.2.9"
axum-tracing-opentelemetry = { version = "0.10.0", features = ["otlp", "zipkin"] }
opentelemetry = { version = "0.18", features = ["rt-tokio"] }
tracing-opentelemetry = "0.18"
opentelemetry-http = "0.7.0"
opentelemetry-zipkin = "0.16"
tracing = { version = "0.1.37", default-features = false }
tracing-subscriber = { version = "0.3", default-features = false, features = [
  "env-filter",
  "fmt",
  "json",
] }
serde = { version = "1.0.163", optional = true }
serde_json = { version = "1.0.96", optional = true }
opentelemetry_api = { version = "0.19.0", features = ["testing"], optional = true }
rand = { version = "0.8.5", optional = true }
hyper = { version = "0.14.24", features = ["full"], optional = true }

[features]
full = ["integration_test"]
default = []
integration_test = ["serde", "serde_json", "opentelemetry_api", "rand", "hyper"]

[profile.dev]
lto = false
# https://jakedeichert.com/blog/reducing-rust-incremental-compilation-times-on-macos-by-70-percent/
split-debuginfo = "unpacked"
# Use slightly better optimizations
opt-level = 0
# Disable integer overflow checks
overflow-checks = false

[profile.release]
opt-level = 's'
incremental = true
lto = true
# The Rust compiler splits your crate into multiple codegen units to parallelize (and thus speed up) compilation. However, this might cause it to miss some potential optimizations.
codegen-units = 1
